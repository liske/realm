#!/usr/bin/perl

# realm - REmote Authentication Log Monitor
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#

use warnings;
use strict;

use AnyEvent;
use AnyEvent::Handle;
use AnyEvent::Socket;
use Getopt::Std;
use Log::Any::Adapter;
use Log::Dispatch;
use Log::Dispatch::Screen;
use Log::Dispatch::Syslog;

my $VERSION = qq(0.1);
$Getopt::Std::STANDARD_HELP_VERSION++;

sub HELP_MESSAGE {
    print <<USG;
Usage:

  realm-feed [-v] [-c <cfg>] [-i <inst>]

    -v		be more verbose
    -c <cfg>	config filename
    -i <inst>   instance name

USG
}

sub VERSION_MESSAGE {
    print <<LIC;

realm $VERSION - REmote Authentication Log Monitor

Authors:
  Thomas Liske <thomas\@fiasko-nw.net>

Copyright Holder:
  2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]

Upstream:
  https://github.com/liske/realm

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

LIC
#/
}


our %realmconf = (
    listen_port => 1712,
    listen_addr => '::1',
);
our %realm_skeys;
our @realm_dkeys;
our %realms = ();

our $opt_c = '/etc/realm/realm.conf';
our $opt_v;
our $opt_i = 'default';
unless(getopts('c:vi:')) {
    HELP_MESSAGE;
    exit 1;
}

die "ERROR: Could not read config file '$opt_c'!\n" unless(-r $opt_c);

# slurp config file
eval `cat "$opt_c"`;
die "$@\n" if($@);


$0 = "realm[$opt_i]";
my $logfmt = sub { my %p = @_; chomp($p{'message'}); return ("[$p{level}] $p{message}\n"); };
my $logger = Log::Dispatch->new(callbacks => $logfmt);
$logger->add(
    Log::Dispatch::Syslog->new(
	name => 'syslog',
	min_level => ($opt_v ? 'info' : 'notice'),
	ident => $0,
	logopt => 'pid',
	facility => 'daemon',
    )
);
Log::Any::Adapter->set('Dispatch', dispatcher => $logger);


sub WARN_handler {
    my($signal) = @_;

    if(defined $logger) {
	$logger->warning("WARNING: $signal");
    }
    else {
	printf STDERR "WARNING: $signal\n";
    }
}

sub DIE_handler {
    my($signal) = @_;

    if(defined $logger) {
	$logger->critical("ERROR: $signal");
    }
    else {
	printf STDERR "ERROR: $signal\n";
    }
    
    exit 1;
}

sub INT_handler {
    if(defined $logger) {
	$logger->notice('Got SIGINT, terminating.');
    }
    else {
	printf STDERR "Got SIGINT, terminating.\n";
    }
    
    exit;
}

$SIG{__WARN__} = 'WARN_handler';
$SIG{__DIE__}  = 'DIE_handler';
$SIG{INT} = 'INT_handler';
$SIG{PIPE} = 'IGNORE';
$SIG{CHLD} = 'IGNORE';

END {
    my $m = "terminated (rc=$?)";
    if(defined $logger) {
	$logger->notice($m);
    }
    else {
	print STDERR "$m\n";
    }
}


my $hsock;
my $fh;
my $sock = tcp_connect $realmconf{'listen_addr'}, $realmconf{'listen_port'}, sub {
    $fh = shift;

    die("Unable to connect to $realmconf{listen_addr}:$realmconf{listen_port}: $!\n") unless($fh);

    $hsock = new AnyEvent::Handle(
	fh => $fh,
	on_eof => sub {
	    exit;
	},
    );
};
my $hstdin;
$hstdin = new AnyEvent::Handle(
    fh => \*STDIN,
    on_eof => sub {
	close($fh);
	exit;
    },
    on_read => sub {
	    $hstdin->push_read(line => sub {
		my $line = shift;
		$line = shift;
		chomp($line);
		my $dataset = { instance => $opt_i };
		my $errs = 0;

		foreach my $key (keys %realm_skeys) {
		    if($line =~ /\|$key=([^|]*)\|/) {
			my $value = $1;
			if($value =~ /$realm_skeys{$key}/) {
			    $dataset->{$key} = $value;
			}
			else {
			    $errs++;
			    $logger->info("Bad value '$value' for key $key on input line!");
use Data::Dumper;
			    print Dumper($realm_skeys{$key});
			    last;
			}
		    }
		    else {
			$errs++;
			$logger->info("Missing key $key on input line!");
			last;
		    }
		}

		$hsock->push_write($hsock->json_coder->encode($dataset)) unless($errs);
	   });
    }
);

$logger->info("enter event loop...");
AnyEvent->condvar->recv;
