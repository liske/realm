#!/usr/bin/perl

# realm - REmote Authentication Log Monitor
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#

use warnings;
use strict;

use AnyEvent;
use AnyEvent::Handle;
use AnyEvent::Socket;
use Getopt::Std;
use Log::Any::Adapter;
use Log::Dispatch;
use Log::Dispatch::Screen;
use Log::Dispatch::Syslog;
use Proc::Daemon;
use Proc::PID::File;

my $VERSION = qq(0.1);
$Getopt::Std::STANDARD_HELP_VERSION++;

sub HELP_MESSAGE {
    print <<USG;
Usage:

  realm-feed [-v] [-c <cfg>]

    -v		be more verbose
    -c <cfg>	config filename

USG
}

sub VERSION_MESSAGE {
    print <<LIC;

realm $VERSION - REmote Authentication Log Monitor

Authors:
  Thomas Liske <thomas\@fiasko-nw.net>

Copyright Holder:
  2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]

Upstream:
  https://github.com/liske/realm

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

LIC
#/
}


our %realmconf = (
    listen_port => 1712,
    listen_addr => '::1',
);
our %realm_skeys;
our @realm_dkeys;
our %realms = ();

our $opt_c = '/etc/realm/realm.conf';
our $opt_v;
our $opt_f;
unless(getopts('c:vf')) {
    HELP_MESSAGE;
    exit 1;
}

die "ERROR: Could not read config file '$opt_c'!\n" unless(-r $opt_c);

# slurp config file
eval `cat "$opt_c"`;
die "$@\n" if($@);


$0 = 'realmd';
my $logfmt = sub { my %p = @_; chomp($p{'message'}); return ("[$p{level}] $p{message}\n"); };
my $logger = Log::Dispatch->new(callbacks => $logfmt);
$logger->add(
    Log::Dispatch::Screen->new(
	name => 'console',
	min_level => ($opt_f ? ($opt_v ? 'info' : 'notice') : 'warning'),
    )
);
$logger->add(
    Log::Dispatch::Syslog->new(
	name => 'syslog',
	min_level => ($opt_v ? 'info' : 'notice'),
	ident => 'realmd',
	logopt => 'pid',
	facility => 'daemon',
    )
) unless($opt_f);
Log::Any::Adapter->set('Dispatch', dispatcher => $logger);


sub WARN_handler {
    my($signal) = @_;

    if(defined $logger) {
	$logger->warning("WARNING: $signal");
    }
    else {
	printf STDERR "WARNING: $signal\n";
    }
}

sub DIE_handler {
    my($signal) = @_;

    if(defined $logger) {
	$logger->critical("ERROR: $signal");
    }
    else {
	printf STDERR "ERROR: $signal\n";
    }
    
    exit 1;
}

sub INT_handler {
    if(defined $logger) {
	$logger->notice('Got SIGINT, terminating.');
    }
    else {
	printf STDERR "Got SIGINT, terminating.\n";
    }
    
    exit;
}

$SIG{__WARN__} = 'WARN_handler';
$SIG{__DIE__}  = 'DIE_handler';
$SIG{INT} = 'INT_handler';
$SIG{PIPE} = 'IGNORE';
$SIG{CHLD} = 'IGNORE';

END {
    my $m = "terminated (rc=$?)";
    if(defined $logger) {
	$logger->notice($m);
    }
    else {
	print STDERR "$m\n";
    }
}


my %conns;
my $sock = tcp_server $realmconf{'listen_addr'}, $realmconf{'listen_port'}, sub {
    my ($fh, $host, $port) = @_;

    $conns{$fh} = new AnyEvent::Handle(
	fh => $fh,
	on_eof => sub {
	    delete($conns{$fh});
	    exit;
	},
	on_read => sub {
	    $conns{$fh}->push_read(json => sub {
		shift;
		my $dataset = shift;

		# ignore unkown instances
		return unless(exists($dataset->{instance}) && exists($realms{$dataset->{instance}}));

		# eval dynamic fields
		foreach my $dkey (@realm_dkeys) {
		    &{$dkey->{sub}}($dataset);
		}

		# apply filters
		foreach my $key (keys %{ $realms{$dataset->{instance}}->{filters} }) {
		    print ">>$key\n$dataset->{$key}\n$realms{$dataset->{instance}}->{filters}->{$key}\n";
		    return unless($dataset->{$key} =~ /$realms{$dataset->{instance}}->{filters}->{$key}/);
		}

		use Data::Dumper;
		print Dumper($dataset);
	    });
	}
    );
};


$logger->info("enter event loop...");
AnyEvent->condvar->recv;

__DATA__

while(<STDIN>) {
    chomp;

    my ($in_ip, $in_user, $in_host, $in_service, $in_misc) = split(/\|/);
    $in_host ||= 'localhost';
    $in_service ||= '<unknown>';
    $in_misc ||= '-';

    my $whois = whois($in_ip);
    my $asn = -1;
    my $netname = '<unknown>';

    $asn = $1 if($whois =~ /^origin\S*:\s+(AS\d+)/mi);
    $netname = $1 if($whois =~ /^netname:\s+(\S+)/mi);

    my %dataset = (
	host => $in_host,
	service => $in_service,
	country => $gi->country_code_by_addr($in_ip),
	asn => $asn,
	netname => $netname,
    );

    use Data::Dumper;
    print Dumper(\%dataset);
}
