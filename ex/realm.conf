
# realm - REmote Authentication Log Monitor
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#

# This is the configuration file of realm. This is perl syntax.


# setup externel packages
use Regexp::Common qw /net/;

use Geo::IP;
my $geoip = Geo::IP->new(GEOIP_INDEX_CACHE | GEOIP_CHECK_CACHE);


# static fields provided from the logs
%realm_skeys = (
	user => q(^\S+$),
	ip => qq(^($RE{net}{IPv4}|$RE{net}{IPv6})\$),
	host => qq(^$RE{net}{domain}{-nospace}\$),
	service => q(^\S+$),
	success => q(^(0|1)$),
);


# dynamicly calculated fields: Whois, GeoIP
@realm_dkeys = (
	{
		name => qq(Whois),
		keys => [qw(asn netname)],
		cache => {
		      name => qq(whois-ip),
		      key => sub {
		      	   my $dataset = shift;
			   return $dataset->{ip};
		      },
		},
		sub => sub {
 		    my $dataset = shift;

		    open(my $hpipe, '-|', qw(whois -H), $dataset->{ip});
		    my $whois = join('', <$hpipe>);
		    close($hpipe);
		    my $asn = '<unknown>';
		    my $netname = '<unknown>';

		    $asn = $1 if($whois =~ /^origin\S*:\s+(AS\d+)/mi);
		    $netname = $1 if($whois =~ /^netname:\s+(\S+)/mi);

		    $dataset->{asn} = $asn;
		    $dataset->{netname} = $netname;
		},
	},
	    
	{
		name => qq(GeoIP),
		keys => [qw(country)],
		sub => sub {
 		    my $dataset = shift;

		    $dataset->{country} = $geoip->country_code_by_addr($dataset->{ip});
		},
	},
	    
);


# realm instance trees using static and dynamic keys
%realms = (
	# 'default' instance
	default => {
	  # ignore input not matching filters
	  filters => {
	  	  success => q(^1$),
          },
	  # create induvidual probability trees foreach set of keys
	  keys => [qw(user)],
	  # set of probability trees to build foreach keyset
	  trees => {
	    # observe source of connections
            source => {
	    	   # used branch & leaf keys
	    	   keys => [qw(country asn netname)],
		   # action trigger level
		   threshold => 0.8,
            },
	    # observe used services
	    destination => {
	    	   # used branch & leaf keys
	    	   keys => [qw(host service)],
		   # action trigger level
		   threshold => 0.8,
            },
	  },
	},
);


# REQUIRED
1;
